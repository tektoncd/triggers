/*
Copyright 2019 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/triggers/pkg/apis/triggers/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TriggerTemplateLister helps list TriggerTemplates.
type TriggerTemplateLister interface {
	// List lists all TriggerTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerTemplate, err error)
	// TriggerTemplates returns an object that can list and get TriggerTemplates.
	TriggerTemplates(namespace string) TriggerTemplateNamespaceLister
	TriggerTemplateListerExpansion
}

// triggerTemplateLister implements the TriggerTemplateLister interface.
type triggerTemplateLister struct {
	indexer cache.Indexer
}

// NewTriggerTemplateLister returns a new TriggerTemplateLister.
func NewTriggerTemplateLister(indexer cache.Indexer) TriggerTemplateLister {
	return &triggerTemplateLister{indexer: indexer}
}

// List lists all TriggerTemplates in the indexer.
func (s *triggerTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerTemplate))
	})
	return ret, err
}

// TriggerTemplates returns an object that can list and get TriggerTemplates.
func (s *triggerTemplateLister) TriggerTemplates(namespace string) TriggerTemplateNamespaceLister {
	return triggerTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TriggerTemplateNamespaceLister helps list and get TriggerTemplates.
type TriggerTemplateNamespaceLister interface {
	// List lists all TriggerTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerTemplate, err error)
	// Get retrieves the TriggerTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TriggerTemplate, error)
	TriggerTemplateNamespaceListerExpansion
}

// triggerTemplateNamespaceLister implements the TriggerTemplateNamespaceLister
// interface.
type triggerTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TriggerTemplates in the indexer for a given namespace.
func (s triggerTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerTemplate))
	})
	return ret, err
}

// Get retrieves the TriggerTemplate from the indexer for a given namespace and name.
func (s triggerTemplateNamespaceLister) Get(name string) (*v1alpha1.TriggerTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("triggertemplate"), name)
	}
	return obj.(*v1alpha1.TriggerTemplate), nil
}

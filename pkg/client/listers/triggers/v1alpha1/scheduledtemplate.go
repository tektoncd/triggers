/*
Copyright 2019 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/triggers/pkg/apis/triggers/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduledTemplateLister helps list ScheduledTemplates.
// All objects returned here must be treated as read-only.
type ScheduledTemplateLister interface {
	// List lists all ScheduledTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledTemplate, err error)
	// ScheduledTemplates returns an object that can list and get ScheduledTemplates.
	ScheduledTemplates(namespace string) ScheduledTemplateNamespaceLister
	ScheduledTemplateListerExpansion
}

// scheduledTemplateLister implements the ScheduledTemplateLister interface.
type scheduledTemplateLister struct {
	indexer cache.Indexer
}

// NewScheduledTemplateLister returns a new ScheduledTemplateLister.
func NewScheduledTemplateLister(indexer cache.Indexer) ScheduledTemplateLister {
	return &scheduledTemplateLister{indexer: indexer}
}

// List lists all ScheduledTemplates in the indexer.
func (s *scheduledTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledTemplate))
	})
	return ret, err
}

// ScheduledTemplates returns an object that can list and get ScheduledTemplates.
func (s *scheduledTemplateLister) ScheduledTemplates(namespace string) ScheduledTemplateNamespaceLister {
	return scheduledTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledTemplateNamespaceLister helps list and get ScheduledTemplates.
// All objects returned here must be treated as read-only.
type ScheduledTemplateNamespaceLister interface {
	// List lists all ScheduledTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledTemplate, err error)
	// Get retrieves the ScheduledTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScheduledTemplate, error)
	ScheduledTemplateNamespaceListerExpansion
}

// scheduledTemplateNamespaceLister implements the ScheduledTemplateNamespaceLister
// interface.
type scheduledTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledTemplates in the indexer for a given namespace.
func (s scheduledTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledTemplate))
	})
	return ret, err
}

// Get retrieves the ScheduledTemplate from the indexer for a given namespace and name.
func (s scheduledTemplateNamespaceLister) Get(name string) (*v1alpha1.ScheduledTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scheduledtemplate"), name)
	}
	return obj.(*v1alpha1.ScheduledTemplate), nil
}

apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: publish-tekton-triggers
spec:
  inputs:
    resources:
    - name: source
      type: git
      targetPath: go/src/github.com/tektoncd/triggers
    - name: bucket
      type: storage
    params:
    - name: versionTag
      description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
    - name: imageRegistry
      description: TODO(tektoncd/pipeline#569) This is a hack to make it easy for folks to switch the registry being used by the many many image outputs
    - name: pathToProject
      description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
  outputs:
    resources:
    - name: bucket
      type: storage
    - name: builtControllerImage
      type: image
    - name: builtWebhookImage
      type: image
    - name: builtEventListenerSinkImage
      type: image
  steps:
  - name: link-input-bucket-to-output
    image: busybox
    command: ["cp"]
    args:
    - -r
    - "/workspace/bucket"
    - "/workspace/output/"
  - name: ensure-release-dirs-exist
    image: busybox
    command: ["mkdir"]
    args:
    - "-p"
    - "/workspace/output/bucket/triggers/latest/"
    - "/workspace/output/bucket/triggers/previous/"

  - name: run-ko
    image: gcr.io/tekton-nightly/ko-ci # tekton-releases broken, see https://github.com/tektoncd/plumbing/issues/128
    env:
    - name: KO_DOCKER_REPO
      value: $(inputs.params.imageRegistry)
    - name: GOPATH
      value: /workspace/go
    - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
      value: /secret/release.json
    command:
    - /bin/sh
    args:
    - -ce
    - |
      set -e
      set -x

      # Auth with CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
      gcloud auth configure-docker

      # ko requires this variable to be set in order to set image creation timestamps correctly https://github.com/google/go-containerregistry/pull/146
      export SOURCE_DATE_EPOCH=`date +%s`

      # Change to directory with our .ko.yaml
      cd /workspace/go/src/github.com/tektoncd/triggers
      # Rewrite "devel" to inputs.params.versionTag
      sed -i 's/devel/$(inputs.params.versionTag)/g' /workspace/go/src/github.com/tektoncd/triggers/config/controller.yaml
      sed -i 's/devel/$(inputs.params.versionTag)/g' /workspace/go/src/github.com/tektoncd/triggers/config/controller-service.yaml
      sed -i 's/devel/$(inputs.params.versionTag)/g' /workspace/go/src/github.com/tektoncd/triggers/config/webhook.yaml
      sed -i 's/devel/$(inputs.params.versionTag)/g' /workspace/go/src/github.com/tektoncd/triggers/config/webhook-service.yaml

      # Publish images and create release.yaml
      ko resolve --preserve-import-paths -f /workspace/go/src/github.com/tektoncd/triggers/config/ > /workspace/output/bucket/triggers/latest/release.yaml
    volumeMounts:
      - name: gcp-secret
        mountPath: /secret

  - name: copy-to-tagged-bucket
    image: busybox
    workingDir: "/workspace/output/bucket"
    command:
    - /bin/sh
    args:
    - -ce
    - |
      set -e
      set -x

      mkdir -p /workspace/output/bucket/triggers/previous/$(inputs.params.versionTag)/
      cp /workspace/output/bucket/triggers/latest/release.yaml /workspace/output/bucket/triggers/previous/$(inputs.params.versionTag)/release.yaml

  - name: tag-images
    image: google/cloud-sdk
    command:
    - /bin/bash
    args:
    - -ce
    - |
      set -e
      set -x

      REGIONS=(us eu asia)
      IMAGES=(
        $(inputs.params.imageRegistry)/$(inputs.params.pathToProject)/$(outputs.resources.builtControllerImage.url)
        $(inputs.params.imageRegistry)/$(inputs.params.pathToProject)/$(outputs.resources.builtWebhookImage.url)
        $(inputs.params.imageRegistry)/$(inputs.params.pathToProject)/$(outputs.resources.builtEventListenerSinkImage.url)
      )
      # Parse the built images from the release.yaml generated by ko
      BUILT_IMAGES=( $(/workspace/go/src/github.com/tektoncd/triggers/tekton/koparse/koparse.py --path /workspace/output/bucket/triggers/latest/release.yaml --base $(inputs.params.imageRegistry)/$(inputs.params.pathToProject) --images ${IMAGES[@]}) )

      # Auth with account credentials
      gcloud auth activate-service-account --key-file=/secret/release.json

      # Tag the images and put them in all the regions
      for IMAGE in "${BUILT_IMAGES[@]}"
      do
        IMAGE_WITHOUT_SHA=${IMAGE%%@*}
        gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:latest
        gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:$(inputs.params.versionTag)
        for REGION in "${REGIONS[@]}"
        do
          for TAG in "latest" $(inputs.params.versionTag)
          do
            gcloud -q container images add-tag ${IMAGE} ${REGION}.${IMAGE_WITHOUT_SHA}:$TAG
          done
        done
      done
    volumeMounts:
      - name: gcp-secret
        mountPath: /secret

  volumes:
    - name: gcp-secret
      secret:
        secretName: release-secret
